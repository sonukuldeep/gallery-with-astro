---
const req = await fetch('https://rickandmortyapi.com/api/character')
const allCharactersRaw = await req.json()
const allCharacters = allCharactersRaw.results
---
<section>
    <article class="sidebar">
        <div class="list"><span>Status<i class="fa-solid fa-angle-right"></i></span>
            <ul>
                <li class='option-status'>Alive</li>
                <li class='option-status'>Dead</li>
                <li class='option-status'>Unknown</li>
            </ul>
        </div>
        <div class="list"><span>Species<i class="fa-solid fa-angle-right"></i></span>
            <ul>
                <li class='option-spicies'>Human</li>
                <li class='option-spicies'>Alien</li>
            </ul>
        </div>
        <div class="list"><span>Origin<i class="fa-solid fa-angle-right"></i></span>
            <ul>
                <li class='option-origin'>Earth (C-137)</li>
                <li class='option-origin'>Unknown</li>
                <li class='option-origin'>Earth (Replacement Dimension)</li>
                <li class='option-origin'>Abadango</li>
            </ul>
        </div>
        <div class="list"><span>Location<i class="fa-solid fa-angle-right"></i></span>
            <ul>
                <li class='option-location'>Citadel of Ricks</li>
                <li class='option-location'>Unknown</li>
                <li class='option-location'>Earth (Replacement Dimension)</li>
                <li class='option-location'>Abadango</li>
                <li class='option-location'>Testicle Monster Dimension</li>
                <li class='option-location'>Worldender's lair</li>
                <li class='option-location'>Anatomy Park</li>
                <li class='option-location'>Interdimensional Cable</li>
            </ul>
        </div>
        <div class="list"><span>Gender<i class="fa-solid fa-angle-right"></i></span>
            <ul>
                <li class='option-gender'>Male</li>
                <li class='option-gender'>Female</li>
                <li class='option-gender'>Unknown</li>
            </ul>
        </div>
    </article>
    <main class='main'>
        <ul class='grid'>
            {allCharacters.map(character=>{return <li class='card' data-status={character.status} data-species={character.species} data-origin={character.origin.name} data-location={character.location.name} data-gender={character.gender}><a href={character.id}><img src={character.image} alt='character name'/></a><div>{character.name}</div></li>})}
        </ul>
    </main>
</section>

<style>
    section {
        display: flex;
    }
    .main {
        outline: 1px solid #333;
        flex: 1 1 auto;
        display: flex;
    }
    .main .grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        flex: 1 1 auto;
        margin: auto;
    }
    .main .card {
        border: 1px solid #333;
        border-radius: 8px;
        margin: 5px;
        padding: 10px 5px;
        background-color: var(--color-bg-primary);
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }
    .main .card img {
        width: 95%;
        border-radius: 8px;
        border: 1px solid #333;
        cursor: pointer;
    }
    .main .card div {
        color: var(--color-text-primary);
    }

    @media (width > 768px) {
        .main .grid {
            max-width: 70%;
        }
    }
    .sidebar {
        background-color: var(--color-bg-primary);
        border-right: 1px solid #333;
        width: 250px;
    }
    .sidebar .list {
        text-transform: uppercase;
        border-bottom: 1px solid #333;
        max-height: 50px; /*max-height makes the slow animation possible */ 
        line-height: 50px;
        overflow: hidden;
        transition: 0.5s ease-out;
    }
    .sidebar .list.activate {
        color: var(--color-text-primary);
        max-height: 500px;
    }
    .sidebar .list span {
        padding-left: 10px;
        background-color: aquamarine;
        display: inline-block; 
        width: 100%;
        position: relative;
    }
    .sidebar .list ul li {
        padding-left: 20px;
        background-color: #fff;
    }
    .sidebar .list ul li:hover,.sidebar .list ul li.selected {
        background-color: var(--color-text-primary);
        color: #fff;
    }
    .sidebar .list i {
        position: absolute;
        right: 15px;
        top: 30%;
        transform: translateY(-50%);
        transform: rotate(90deg);
        margin: auto;
        display: inline-block;
        transition: 0.3s ease-in-out;
    }
    .sidebar .list.activate i{
        transform: rotate(270deg);
    }
</style>
<script>
    //main grid functionality
    const characters = document.querySelectorAll('.card')
    let status = [] //saving selected charecter in this
    
    function triggerFilter(){
        characters.forEach(character=>{
            const characterStatus = character.getAttribute('data-status').toUpperCase()
            if(status.length && status.includes(characterStatus)){
                character.style.display = 'none'
            }
            else {
                character.style.display = 'flex'
            }
        
        })
    }
    
    //sidebar functionality
    const list = document.querySelectorAll('.sidebar .list')
    const span = document.querySelectorAll('.sidebar .list span')
    //list toggle functionality
    span.forEach((element, index)=>{
        element.addEventListener('click',()=>{list[index].classList.toggle('activate')})
    })

    const option_status = document.querySelectorAll('.option-status')
    option_status.forEach(element=>{
        element.addEventListener('click',(e)=>{filterFunction(e)})
    })

    function filterFunction(e) {
        e.target.classList.toggle('selected')
        const selected = e.target.innerText
    

        let filterDataStatus = status
        
        if(filterDataStatus.includes(selected)){
            filterDataStatus = filterDataStatus.filter(data=>(data !== selected))
        }
        else {
            filterDataStatus.push(selected)
        }
        status = filterDataStatus
        triggerFilter()
    }

    //main grid functionality
    // const characters = document.querySelectorAll('.card')
    let spicies = [] //saving selected charecter in this
    
    function triggerFilter2(){
        characters.forEach(character=>{
            const characterSpicies = character.getAttribute('data-species').toUpperCase()
            if(spicies.includes(characterSpicies)){
                character.style.display = 'flex'
            }
            else {
                character.style.display = 'none'
            }
        
        })
    }
    
    //sidebar functionality
    
    const option_spicies = document.querySelectorAll('.option-spicies')
    option_spicies.forEach(element=>{
        element.addEventListener('click',(e)=>{filterFunction2(e)})
    })

    function filterFunction2(e) {
        e.target.classList.toggle('selected')
        const selected = e.target.innerText
    

        let filterDataSpicies = spicies
        
        if(filterDataSpicies.includes(selected)){
            filterDataSpicies = filterDataSpicies.filter(data=>(data !== selected))
        }
        else {
            filterDataSpicies.push(selected)
        }
        spicies = filterDataSpicies
        triggerFilter2()
    }


    let origin = [] //saving selected charecter in this
    
    function triggerFilter3(){
        characters.forEach(character=>{
            const characterorigin = character.getAttribute('data-origin').toUpperCase()
            if(origin.includes(characterorigin)){
                character.style.display = 'flex'
            }
            else {
                character.style.display = 'none'
            }
        
        })
    }
    
    //sidebar functionality
    
    const option_origin = document.querySelectorAll('.option-origin')
    option_origin.forEach(element=>{
        element.addEventListener('click',(e)=>{filterFunction3(e)})
    })

    function filterFunction3(e) {
        e.target.classList.toggle('selected')
        const selected = e.target.innerText
    

        let filterDataorigin = origin
        
        if(filterDataorigin.includes(selected)){
            filterDataorigin = filterDataorigin.filter(data=>(data !== selected))
        }
        else {
            filterDataorigin.push(selected)
        }
        origin = filterDataorigin
        triggerFilter3()
    }


    let location = [] //saving selected charecter in this
    
    function triggerFilter4(){
        characters.forEach(character=>{
            const characterlocation = character.getAttribute('data-location').toUpperCase()
            if(location.includes(characterlocation)){
                character.style.display = 'flex'
            }
            else {
                character.style.display = 'none'
            }
        
        })
    }
    
    //sidebar functionality
    
    const option_location = document.querySelectorAll('.option-location')
    option_location.forEach(element=>{
        element.addEventListener('click',(e)=>{filterFunction4(e)})
    })

    function filterFunction4(e) {
        e.target.classList.toggle('selected')
        const selected = e.target.innerText
    

        let filterDatalocation = location
        
        if(filterDatalocation.includes(selected)){
            filterDatalocation = filterDatalocation.filter(data=>(data !== selected))
        }
        else {
            filterDatalocation.push(selected)
        }
        location = filterDatalocation
        triggerFilter4()
    }


    let gender = [] //saving selected charecter in this
    
    function triggerFilter5(){
        characters.forEach(character=>{
            const charactergender = character.getAttribute('data-gender').toUpperCase()
            if(gender.includes(charactergender)){
                character.style.display = 'flex'
            }
            else {
                character.style.display = 'none'
            }
        
        })
    }
    
    //sidebar functionality
    
    const option_gender = document.querySelectorAll('.option-gender')
    option_gender.forEach(element=>{
        element.addEventListener('click',(e)=>{filterFunction5(e)})
    })

    function filterFunction5(e) {
        e.target.classList.toggle('selected')
        const selected = e.target.innerText
    

        let filterDatagender = gender
        
        if(filterDatagender.includes(selected)){
            filterDatagender = filterDatagender.filter(data=>(data !== selected))
        }
        else {
            filterDatagender.push(selected)
        }
        gender = filterDatagender
        triggerFilter5()
    }
</script>